#!/usr/bin/env bash
set -euo pipefail

USE_HOOK=${USE_HOOK:-true}

if [[ $USE_HOOK = false ]]; then
  exit
fi

RED="\e[31m"
GREEN="\e[32m"
ENDCOLOR="\e[0m"

print_ok() {
  echo -e "${GREEN}[OK] $*${ENDCOLOR}"
}

print_error() {
  echo -e "${RED}[ERROR] A command returned a non-zero exit code. Output from failing command:${ENDCOLOR}"
  echo "$*"
  exit 1
}

# Wrapper to run a command, suppress output unless it fails, then print stderr
run_quiet() {
  local errfile
  errfile=$(mktemp)
  "$@" &>"$errfile" || {
    print_error "$(cat "$errfile")"
  }
  rm -f "$errfile"
}

function get_resource_name() {
  local filename=$1
  echo "azurerm_$(echo "$filename" | awk -F'/' '{print $NF}' | sed 's/_resource.go//')"
}

# Track linted directories to avoid duplicating work
declare -A dirs_to_lint
script_dir="$(dirname "$(readlink -f "$0")")" # Does not have a trailing slash

echo [INFO] Running pre-commit checks...

## File Level Checks ##
for x in $(git diff --name-only --cached); do
  if [ ! -e "$x" ] || [ ! -r "$x" ]; then
    echo "[INFO] Path '$x' does not exist or is not accessible. Skipping..."
    continue
  fi

  if grep -n 'fmt\.Print' "$x" >/dev/null; then
    print_error "Staged file '$x' contains \"fmt.Print\" message, please remove before committing."
  fi

  if [[ $x == "vendor"* ]]; then
    continue
  fi

  if grep -nE 'utils\.(String|Bool|Int|Float)' "$x" >/dev/null; then
    echo "[WARN] Staged file contains deprecated function(s) calls \"utils.(String|Bool|Int|Float...)\", replacing with pointer.To()" && run_quiet ~/bin/replace_utils_with_pointer_to.sh "$x"
  fi

  if grep -nF '/ Resource Group ' "$x" >/dev/null; then
    print_error "Staged file '$x' contains \"/ Resource Group \", please remove parens and use '%s' and 'id' instead before committing."
  fi

  if echo "$x" | grep -E '\.go$' >/dev/null; then
    echo "[INFO] Removing unused imports for '$x'" && goimports -w "$x"
    echo "[INFO] Reordering imports for '$x'" && run_quiet gci write "$x"
    dirs_to_lint[$(dirname "$x")]=1

    if echo "$x" | grep -E '_resource\.go$' >/dev/null; then
      echo "[INFO] document-lint check for '$(get_resource_name "$x")'"  && run_quiet go run ~/terraform-provider-azurerm/internal/tools/document-lint check -resource "$(get_resource_name "$x")"
    fi
  fi

  if echo "$x" | grep -E 'test|markdown' >/dev/null; then
    echo "[INFO] terraform fmt for '$x'" && run_quiet terrafmt fmt -f "$x"
  fi

  if echo "$x" | grep -E 'markdown' >/dev/null && grep -nF '**NOTE:**' "$x" >/dev/null; then
    print_error "Staged file documentation file '$x' contains \"NOTE\", please replace with \"Note\" before committing."
  fi

  if echo "$x" | grep -E '\.kt[s]?$' >/dev/null; then
    echo "[INFO] ensuring Teamcity project passes validation" && (cd ~/terraform-provider-azurerm/.teamcity && run_quiet make validate)
  fi

done

## Directory (Package) Level Checks ##
for dir in "${!dirs_to_lint[@]}"; do
      echo "[INFO] Running golangci-lint on '$dir' due to *.go changes in that directory" && run_quiet golangci-lint run -v "$dir"
      echo "[INFO] Checking field names for './$dir'" && field-name-checker "./$dir"
done

## Program Level Checks ##
staged_files="$(git diff --name-only --cached | grep -E '^internal/services/.*\.go$' || echo NO_CODE_CHANGES)"
if [[ $staged_files == NO_CODE_CHANGES ]]; then
  echo "[INFO] Skipping build due to no code changes"
else
  echo "[INFO] Due to code changes, running run-tflint.sh and building code in parallel"
  tflint_err=$(mktemp)
  build_err=$(mktemp)
  # Do NOT use run_quiet for background jobs, just redirect stdout and stderr
  bash -c "$HOME/terraform-provider-azurerm/scripts/run-tflint.sh" >/dev/null 2>"$tflint_err" &
  tflint_pid=$!

  service_dirs=$(echo "$staged_files" | awk -F'/' '{print $1"/"$2"/"$3}' | sort | uniq)
  for dir in $service_dirs; do
    if [ -d "$dir" ]; then
      echo "[INFO] Running 'go test -c' in $dir"
      (cd "$dir" && run_quiet go test -c)
    fi
  done
  echo "[INFO] Ensuring the code can compile..."
  go build >/dev/null 2>"$build_err" &
  build_pid=$!

  if ! wait $tflint_pid; then
    cat $tflint_err
    exit 1
  fi

  if ! wait $build_pid; then
    cat $build_err
    exit 1
  fi
fi

print_ok "All Pre-Commit checks passed, staging any automatically changed files..."

git add .
